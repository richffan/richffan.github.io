<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>Golang - 标签 - 樊刹</title>
    <link>http://richfan.site/tags/golang/</link>
    <description>Golang - 标签 | 樊刹</description>
    <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sat, 01 Oct 2022 00:00:00 &#43;0000</lastBuildDate><atom:link href="http://richfan.site/tags/golang/" rel="self" type="application/rss+xml" /><item>
  <title>Golang入门笔记-CH01-Go语言介绍与安装</title>
  <link>http://richfan.site/%E7%A8%8B%E6%8A%80/golang/golang%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0-ch01-go%E8%AF%AD%E8%A8%80%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%AE%89%E8%A3%85/</link>
  <pubDate>Sat, 01 Oct 2022 00:00:00 &#43;0000</pubDate>
  <author>作者</author>
  <guid>http://richfan.site/%E7%A8%8B%E6%8A%80/golang/golang%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0-ch01-go%E8%AF%AD%E8%A8%80%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%AE%89%E8%A3%85/</guid>
  <description><![CDATA[1. Go 语言介绍 1.1 Go 语言的发展Go 语言又称 Golang，起源于 2007 年，来自于谷歌内部的一个项目，于 2009 年正式对外发布。创始团队有三人，都是计算机界的]]></description>
</item>
<item>
  <title>Golang入门笔记-CH02-Go语言基本语法和结构</title>
  <link>http://richfan.site/%E7%A8%8B%E6%8A%80/golang/golang%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0-ch02-go%E8%AF%AD%E8%A8%80%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E5%92%8C%E7%BB%93%E6%9E%84/</link>
  <pubDate>Sat, 01 Oct 2022 00:00:00 &#43;0000</pubDate>
  <author>作者</author>
  <guid>http://richfan.site/%E7%A8%8B%E6%8A%80/golang/golang%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0-ch02-go%E8%AF%AD%E8%A8%80%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E5%92%8C%E7%BB%93%E6%9E%84/</guid>
  <description><![CDATA[1. 命名规范 1.1 文件Go 语言中，源文件以 .go 格式保存，例如 main.go，且文件名只能由小写字母组成，若有多个单词，可以用下划线 _ 进行拼接，例如 m]]></description>
</item>
<item>
  <title>Golang入门笔记-CH03-Go语言基本数据类型</title>
  <link>http://richfan.site/%E7%A8%8B%E6%8A%80/golang/golang%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0-ch03-go%E8%AF%AD%E8%A8%80%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
  <pubDate>Sat, 01 Oct 2022 00:00:00 &#43;0000</pubDate>
  <author>作者</author>
  <guid>http://richfan.site/%E7%A8%8B%E6%8A%80/golang/golang%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0-ch03-go%E8%AF%AD%E8%A8%80%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
  <description><![CDATA[1. 常量 1.1 常量的定义常量是一种特殊的变量，被初始化之后就无法再改变。 Go 语言中，常量的类型只能是布尔型，数字型（整型、浮点型和复数）和字符串型。]]></description>
</item>
<item>
  <title>Golang入门笔记-CH04-Go语言流程控制</title>
  <link>http://richfan.site/%E7%A8%8B%E6%8A%80/golang/golang%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0-ch04-go%E8%AF%AD%E8%A8%80%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</link>
  <pubDate>Sat, 01 Oct 2022 00:00:00 &#43;0000</pubDate>
  <author>作者</author>
  <guid>http://richfan.site/%E7%A8%8B%E6%8A%80/golang/golang%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0-ch04-go%E8%AF%AD%E8%A8%80%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</guid>
  <description><![CDATA[前言流程控制是每门语言控制程序逻辑和执行顺序的重要组成部分，Go 语言中常见的流程控制有 if，for，switch；break、continu]]></description>
</item>
<item>
  <title>Golang入门笔记-CH05-数组和切片</title>
  <link>http://richfan.site/%E7%A8%8B%E6%8A%80/golang/golang%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0-ch05-%E6%95%B0%E7%BB%84%E5%92%8C%E5%88%87%E7%89%87/</link>
  <pubDate>Sat, 01 Oct 2022 00:00:00 &#43;0000</pubDate>
  <author>作者</author>
  <guid>http://richfan.site/%E7%A8%8B%E6%8A%80/golang/golang%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0-ch05-%E6%95%B0%E7%BB%84%E5%92%8C%E5%88%87%E7%89%87/</guid>
  <description><![CDATA[数组 初始化数组可以保存指定长度的多个数据，且这些数据的类型都相同，数据类型可以是原始类型，如整型和字符串等，也可以是自定义类型。 数组通过索引]]></description>
</item>
<item>
  <title>Golang入门笔记-CH06-Map</title>
  <link>http://richfan.site/%E7%A8%8B%E6%8A%80/golang/golang%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0-ch06-map/</link>
  <pubDate>Sat, 01 Oct 2022 00:00:00 &#43;0000</pubDate>
  <author>作者</author>
  <guid>http://richfan.site/%E7%A8%8B%E6%8A%80/golang/golang%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0-ch06-map/</guid>
  <description><![CDATA[声明和初始化 Mapmap 是一种特殊的数据结构，通过键 key 和值 value 来保存数据，可以快速地根据 key 找到其对应的 value，与 python 中的字典和 Java 中的 HashMap 类似。 map 是引用类]]></description>
</item>
<item>
  <title>Golang入门笔记-CH07-结构体和方法</title>
  <link>http://richfan.site/%E7%A8%8B%E6%8A%80/golang/golang%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0-ch07-%E7%BB%93%E6%9E%84%E4%BD%93%E5%92%8C%E6%96%B9%E6%B3%95/</link>
  <pubDate>Sat, 01 Oct 2022 00:00:00 &#43;0000</pubDate>
  <author>作者</author>
  <guid>http://richfan.site/%E7%A8%8B%E6%8A%80/golang/golang%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0-ch07-%E7%BB%93%E6%9E%84%E4%BD%93%E5%92%8C%E6%96%B9%E6%B3%95/</guid>
  <description><![CDATA[Go 语言通过 定义结构体来支持用户自定义类型。一个结构体代表现实世界中的一个实体，类似于 Java 中的实体类。当要定义一个类型时，这个类型包含很多属性，]]></description>
</item>
<item>
  <title>Golang入门笔记-CH08-接口</title>
  <link>http://richfan.site/%E7%A8%8B%E6%8A%80/golang/golang%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0-ch08-%E6%8E%A5%E5%8F%A3/</link>
  <pubDate>Sat, 01 Oct 2022 00:00:00 &#43;0000</pubDate>
  <author>作者</author>
  <guid>http://richfan.site/%E7%A8%8B%E6%8A%80/golang/golang%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0-ch08-%E6%8E%A5%E5%8F%A3/</guid>
  <description><![CDATA[1. 使用接口的原因我们来看一段代码： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 type Cat struct{} func (c Cat) Say() string { return &#34;喵喵喵&#34; } type Dog struct{} func (d Dog) Say() string { return &#34;]]></description>
</item>
<item>
  <title>Golang入门笔记-CH09-反射</title>
  <link>http://richfan.site/%E7%A8%8B%E6%8A%80/golang/golang%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0-ch09-%E5%8F%8D%E5%B0%84/</link>
  <pubDate>Sat, 01 Oct 2022 00:00:00 &#43;0000</pubDate>
  <author>作者</author>
  <guid>http://richfan.site/%E7%A8%8B%E6%8A%80/golang/golang%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0-ch09-%E5%8F%8D%E5%B0%84/</guid>
  <description><![CDATA[反射是用程序检查其所拥有的结构，尤其是类型的一种能力。反射可以在运行时（不必在编译时）检查类型和变量，例如大小、变量、方法和动态调用这些方法]]></description>
</item>
<item>
  <title>Golang入门笔记-CH10-函数高级特性</title>
  <link>http://richfan.site/%E7%A8%8B%E6%8A%80/golang/golang%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0-ch10-%E5%87%BD%E6%95%B0%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/</link>
  <pubDate>Sat, 01 Oct 2022 00:00:00 &#43;0000</pubDate>
  <author>作者</author>
  <guid>http://richfan.site/%E7%A8%8B%E6%8A%80/golang/golang%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0-ch10-%E5%87%BD%E6%95%B0%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/</guid>
  <description><![CDATA[传递变长参数如果函数最后一个参数采用 ...type 的形式，那么这个函数就可以处理一个变长参数（长度可以为 0），这样的函数被称为变参函数，如： 1 func myFunc(a int, args ...int)]]></description>
</item>
</channel>
</rss>
